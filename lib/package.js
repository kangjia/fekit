// Generated by CoffeeScript 1.4.0
(function() {
  var Package, async, env, fs, semver, utils, _;

  fs = require('fs');

  _ = require('underscore');

  semver = require('semver');

  async = require('async');

  env = require('./env');

  utils = require('./util');

  Package = (function() {

    function Package(name, semverstr, basepath) {
      this.name = name;
      this.semverstr = semverstr;
      this.basepath = basepath;
      this.schema = null;
      this.version = null;
      this.version_config = null;
      this.fekit_config = null;
      this.semverstr = !this.semverstr ? "*" : this.semverstr;
      this.children = [];
      this.package_installed_path = utils.path.join(this.basepath, Package.FEKIT_MODULE_DIR, this.name);
    }

    Package.prototype.get_local_entry = function() {
      var _conf, _fekit_conf_path;
      if (this.name === '.' || this.name === '..') {
        return null;
      }
      _fekit_conf_path = utils.path.join(this.package_installed_path, 'fekit.config');
      if (!utils.path.exists(_fekit_conf_path)) {
        return null;
      }
      _conf = utils.file.io.readJSON(_fekit_conf_path);
      return utils.path.join(this.package_installed_path, (_conf.main ? _conf.main : "src/index"));
    };

    Package.prototype.report = function() {
      var c, idx, last, p, _i, _len, _ref;
      c = console.info;
      c("");
      c("" + this.name + "@" + this.version + " " + Package.FEKIT_MODULE_DIR + "/" + this.name);
      last = this.children.length - 1;
      _ref = this.children;
      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
        p = _ref[idx];
        if (idx === last) {
          c("└── " + p.name + "@" + p.version);
        } else {
          c("├── " + p.name + "@" + p.version);
        }
      }
      return c("");
    };

    Package.prototype.preinstall = function(done) {
      return this._preinstall(done);
    };

    Package.prototype._preinstall = function(done) {
      var _this = this;
      return this._fetch_remote_package_info(function(err, schema) {
        if (err) {
          return done(err);
        }
        _this.schema = schema;
        _this.version = semver.maxSatisfying(_.keys(_this.schema.versions), _this.semverstr);
        if (!_this.version) {
          return done("'" + _this.name + "@" + _this.semverstr + "' is not in the fekit registry.");
        }
        _this.version_config = schema.versions[_this.version];
        _this.fekit_config = schema.versions[_this.version].config;
        return _this._each_dependencies_preinstall(done);
      });
    };

    Package.prototype._each_dependencies_preinstall = function(done) {
      var deps, _basepath, _deps, _name, _ver;
      _deps = this.fekit_config.dependencies || {};
      if (_.size(_deps) === 0) {
        return done();
      }
      _basepath = utils.path.join(this.package_installed_path);
      deps = (function() {
        var _results;
        _results = [];
        for (_name in _deps) {
          _ver = _deps[_name];
          _results.push(new Package(_name, _ver, _basepath));
        }
        return _results;
      })();
      this.children = deps;
      return async.eachSeries(deps, function(pkg, pkg_done) {
        return pkg._preinstall(function(err) {
          return pkg_done(err);
        });
      }, function(err) {
        return done(err);
      });
    };

    Package.prototype._each_dependencies_install = function(done) {
      var pkgname, version;
      pkgname = this.name;
      version = this.version;
      return async.eachSeries(this.children, function(pkg, pkg_done) {
        return pkg.install(function(err) {
          return pkg_done(err);
        });
      }, function(err) {
        return done(err, pkgname, version);
      });
    };

    Package.prototype.install = function(done) {
      var self;
      self = this;
      return utils.file.rmrf(self.package_installed_path, function(err) {
        var tarfile_path;
        if (err) {
          return done(err);
        }
        tarfile_path = self.package_installed_path + ".tgz";
        utils.file.mkdirp(utils.path.dirname(tarfile_path));
        return utils.http.get({
          url: self.version_config.dist.tarball,
          encoding: null
        }, function(err, res, body) {
          fs.writeFileSync(tarfile_path, body);
          return utils.tar.unpack(tarfile_path, self.package_installed_path, function(err) {
            utils.file.rmrf(tarfile_path);
            return self._each_dependencies_install(done);
          });
        });
      });
    };

    Package.prototype._fetch_remote_package_info = function(done) {
      var url;
      url = env.getPackageUrl(this.name);
      return this._get(url, function(err, res, body) {
        var json;
        if (err) {
          return done(err);
        }
        try {
          json = JSON.parse(body);
        } catch (err) {
          if (err) {
            return done(err);
          }
        }
        if (!json.ret) {
          return done(json.errmsg);
        }
        return done(null, json.data);
      });
    };

    Package.prototype._get = function(url, cb) {
      return utils.http.get(url, cb);
    };

    Package.prototype._check_local_package = function() {
      var conf, conf_path;
      if (!utils.path.exists(this.package_installed_path)) {
        return false;
      }
      conf_path = utils.path.join(this.package_installed_path, 'fekit.config');
      if (!utils.path.exists(conf_path)) {
        return false;
      }
      conf = utils.file.io.readJSON(conf_path);
      if (!semver.eq(conf.version, this.semverstr)) {
        return false;
      }
      return true;
    };

    return Package;

  })();

  Package.FEKIT_MODULE_DIR = 'fekit_modules';

  module.exports = Package;

}).call(this);
